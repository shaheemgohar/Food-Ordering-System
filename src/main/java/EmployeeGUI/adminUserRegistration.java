
package EmployeeGUI;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DreamDreams
 */
public class adminUserRegistration extends javax.swing.JFrame {

    /**
     * Creates new form adminUserRegistration
     */
    public adminUserRegistration() {
        initComponents();
        refreshData();
    }

    //methods
    
    //refreshing data in User Registration Table
    private void refreshData(){
        try{
            DefaultTableModel regTable = (DefaultTableModel) userRegistrationTable.getModel();
            regTable.setRowCount(0);
            
            //read from file
            String filename = "employees.txt";
            BufferedReader br = new BufferedReader(new FileReader(filename));
            String read;
            
            while((read = br.readLine()) != null){
                String[] data = read.split(";");
                regTable.addRow(new Object[]{
                    data[0] , data[1] , data[2] , data[3] , data[4] , data[5]
                });
            }      
                        
        }catch(IOException e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    
    
    
    
    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        userRegistrationTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        nametxt = new javax.swing.JTextField();
        phonetxt = new javax.swing.JTextField();
        userIDtxt = new javax.swing.JTextField();
        usernametxt = new javax.swing.JTextField();
        passwordtxt = new javax.swing.JPasswordField();
        rolecb = new javax.swing.JComboBox<>();
        addbtn = new javax.swing.JButton();
        updatebtn = new javax.swing.JButton();
        deletebtn = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        backbtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));

        userRegistrationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UserID", "Username", "Password", "Name", "Phone", "Role"
            }
        ));
        userRegistrationTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userRegistrationTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(userRegistrationTable);
        if (userRegistrationTable.getColumnModel().getColumnCount() > 0) {
            userRegistrationTable.getColumnModel().getColumn(1).setResizable(false);
            userRegistrationTable.getColumnModel().getColumn(2).setResizable(false);
        }

        jLabel1.setText("UserID");

        jLabel2.setText("Username");

        jLabel3.setText("Password");

        jLabel4.setText("Phone");

        jLabel5.setText("Name");

        jLabel6.setText("Role");

        nametxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nametxtActionPerformed(evt);
            }
        });

        phonetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phonetxtActionPerformed(evt);
            }
        });

        rolecb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Vendor", "Customer", "Runner" }));

        addbtn.setText("Add");
        addbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbtnActionPerformed(evt);
            }
        });

        updatebtn.setText("Update");
        updatebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatebtnActionPerformed(evt);
            }
        });

        deletebtn.setText("Delete");
        deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebtnActionPerformed(evt);
            }
        });

        jButton4.setText("Read");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel7.setText("User Registration");

        backbtn.setText("Back");
        backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(addbtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(updatebtn))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(46, 46, 46)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(usernametxt)
                                .addComponent(userIDtxt)
                                .addComponent(passwordtxt)
                                .addComponent(rolecb, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jButton4)
                            .addGap(74, 74, 74)
                            .addComponent(deletebtn)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(phonetxt)
                            .addComponent(nametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 209, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(backbtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(402, 402, 402))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(backbtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(userIDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(usernametxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(passwordtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(nametxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(phonetxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(rolecb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addbtn)
                            .addComponent(updatebtn))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deletebtn)
                            .addComponent(jButton4))
                        .addGap(53, 53, 53))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nametxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nametxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nametxtActionPerformed

    private void phonetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phonetxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phonetxtActionPerformed
    
    private boolean isUserIDUnique(String userID){
        try{
            String filename = "employees.txt";
            BufferedReader br = new BufferedReader(new FileReader(filename));
            String line;
            
            while((line=br.readLine())!=null){
                String[] data = line.split(";");
                
                if(data[0].equals(userID)){
                    br.close();
                    return false;
                }
                
            }
            
                br.close();
                return true; //no duplicate found
        }catch(IOException e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
            return false; //if there's an issue reading the file, we assume the id is unique
        }
    }
    
    
    private void addbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addbtnActionPerformed
        
    if(isUserIDUnique(userIDtxt.getText())){    
        try{
            String filename = "employees.txt";
            FileWriter fw = new FileWriter(filename, true);
            
           StringBuilder userRecord = new StringBuilder();
           
           userRecord.append(userIDtxt.getText()).append(";")
           .append(usernametxt.getText()).append(";")
           .append(new String(passwordtxt.getPassword())).append(";")
           .append(nametxt.getText()).append(";")
           .append(phonetxt.getText()).append(";")
           .append(rolecb.getSelectedItem().toString()).append(";");
           
           if(rolecb.getSelectedItem().equals("Customer")){
               userRecord.append("0").append(";");
           }
           userRecord.append(";").append("\n");
            
           
        fw.write(userRecord.toString());
        fw.close();
           
        JOptionPane.showMessageDialog(null,"Account added successfully!");
        refreshData();
        }catch(IOException e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }else{
        JOptionPane.showMessageDialog(null, "Error: User ID already exists. Please choose a different ID.");
    }
    }//GEN-LAST:event_addbtnActionPerformed

    private void deletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebtnActionPerformed
              
        //delete selected row in table
                try{
                  int SelectedRow = userRegistrationTable.getSelectedRow();
                  if(SelectedRow != -1){
                      DefaultTableModel model = (DefaultTableModel) userRegistrationTable.getModel();
                      model.removeRow(SelectedRow);
                      JOptionPane.showMessageDialog(null, "User Deleted!");
                  }else{
                      JOptionPane.showMessageDialog(null, "No user selected");
                  }
                                   
                
              //deleting selected row in file
                  //reading lines from the file
                  String filename = "employees.txt";
                  BufferedReader br = new BufferedReader(new FileReader(filename));
                  StringBuilder filecontent = new StringBuilder();
                  String line;
                  
                  //counter of index starting from 0 when rows are selected
                  int currentLineIndex = 0;
                                   
                  while((line =br.readLine()) != null ){
                      //we save the lines that aren't selected
                      //if the current line index matches the selectedRow index, we skip the if block and only +1 currentLineIndex
                      if(currentLineIndex != SelectedRow){
                          filecontent.append(line).append("\n");
                      }
                      currentLineIndex++;
                  }
                  br.close();
                  //writng the content into the file
                  FileWriter fw = new FileWriter(filename);
                  fw.write(filecontent.toString());
                  fw.close();
                                  
              }catch(IOException e){
                  JOptionPane.showMessageDialog(null,e.getMessage());
              }catch(Exception e){
                  JOptionPane.showMessageDialog(null, e.getMessage());
              }
              
              
    }//GEN-LAST:event_deletebtnActionPerformed
    
    private void updatebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatebtnActionPerformed
        DefaultTableModel model = (DefaultTableModel) userRegistrationTable.getModel();
        //index of the current selected row
        int SelectedRow = userRegistrationTable.getSelectedRow();      
        int currentLineIndex = 0;
            
        if(SelectedRow == -1){
            JOptionPane.showMessageDialog(null,"Select a user to update");
            return;
        }
        
        try{
            String filename = "employees.txt";
            BufferedReader br = new BufferedReader(new FileReader(filename));
            StringBuilder filecontent = new StringBuilder();
            String line;
            
            while((line = br.readLine()) != null){
                
                if(currentLineIndex != SelectedRow){
                    filecontent.append(line).append("\n");
                }
                
                if(currentLineIndex == SelectedRow){
                    filecontent.append(
                      userIDtxt.getText() + ";" +
                      usernametxt.getText() + ";" + 
                      new String(passwordtxt.getPassword()) + ";" + 
                      nametxt.getText() + ";" + 
                      phonetxt.getText() + ";" + 
                      rolecb.getSelectedItem().toString()+ ";" +  "\n"
                                                            
                    );
                  }
                currentLineIndex++;    
                
            }
            br.close();
            
            FileWriter fw = new FileWriter(filename);
            fw.write(filecontent.toString());
            fw.close();
        }catch(IOException e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        refreshData();
    }//GEN-LAST:event_updatebtnActionPerformed

    private void userRegistrationTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userRegistrationTableMouseClicked
        populateFormTableSelection();
        // TODO add your handling code here:
    }//GEN-LAST:event_userRegistrationTableMouseClicked

    private void backbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtnActionPerformed
        this.dispose();
        new adminHome().setVisible(true);
    }//GEN-LAST:event_backbtnActionPerformed
    
    private void populateFormTableSelection(){
        int SelectedRow = userRegistrationTable.getSelectedRow();
        if(SelectedRow != -1){
                String userID = (String) userRegistrationTable.getValueAt(SelectedRow, 0);
                String username = (String) userRegistrationTable.getValueAt(SelectedRow, 1);
                String password = (String) userRegistrationTable.getValueAt(SelectedRow, 2);
                String name = (String) userRegistrationTable.getValueAt(SelectedRow, 3);
                String phone = (String) userRegistrationTable.getValueAt(SelectedRow, 4);
                String role = (String) userRegistrationTable.getValueAt(SelectedRow, 5);
                
                userIDtxt.setText(userID);
                usernametxt.setText(username);
                passwordtxt.setText(password);
                nametxt.setText(name);
                phonetxt.setText(phone);
                rolecb.setSelectedItem(role);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(adminUserRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(adminUserRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(adminUserRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(adminUserRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new adminUserRegistration().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addbtn;
    private javax.swing.JButton backbtn;
    private javax.swing.JButton deletebtn;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nametxt;
    private javax.swing.JPasswordField passwordtxt;
    private javax.swing.JTextField phonetxt;
    private javax.swing.JComboBox<String> rolecb;
    private javax.swing.JButton updatebtn;
    private javax.swing.JTextField userIDtxt;
    private javax.swing.JTable userRegistrationTable;
    private javax.swing.JTextField usernametxt;
    // End of variables declaration//GEN-END:variables
}
